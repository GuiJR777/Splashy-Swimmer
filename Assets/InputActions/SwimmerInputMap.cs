//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions/SwimmerInputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SwimmerInputMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SwimmerInputMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SwimmerInputMap"",
    ""maps"": [
        {
            ""name"": ""Swimmer"",
            ""id"": ""1c94b781-9121-402b-a1c4-76e3c40d9b54"",
            ""actions"": [
                {
                    ""name"": ""Swim"",
                    ""type"": ""Button"",
                    ""id"": ""1eb2edfc-0c36-4a65-bb4d-db313c134e04"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ec787cb4-aca3-4e26-a0c1-daced1b320f6"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d2a3675-e857-40b0-8987-eaf6be847dea"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Swimmer
        m_Swimmer = asset.FindActionMap("Swimmer", throwIfNotFound: true);
        m_Swimmer_Swim = m_Swimmer.FindAction("Swim", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Swimmer
    private readonly InputActionMap m_Swimmer;
    private List<ISwimmerActions> m_SwimmerActionsCallbackInterfaces = new List<ISwimmerActions>();
    private readonly InputAction m_Swimmer_Swim;
    public struct SwimmerActions
    {
        private @SwimmerInputMap m_Wrapper;
        public SwimmerActions(@SwimmerInputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Swim => m_Wrapper.m_Swimmer_Swim;
        public InputActionMap Get() { return m_Wrapper.m_Swimmer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SwimmerActions set) { return set.Get(); }
        public void AddCallbacks(ISwimmerActions instance)
        {
            if (instance == null || m_Wrapper.m_SwimmerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SwimmerActionsCallbackInterfaces.Add(instance);
            @Swim.started += instance.OnSwim;
            @Swim.performed += instance.OnSwim;
            @Swim.canceled += instance.OnSwim;
        }

        private void UnregisterCallbacks(ISwimmerActions instance)
        {
            @Swim.started -= instance.OnSwim;
            @Swim.performed -= instance.OnSwim;
            @Swim.canceled -= instance.OnSwim;
        }

        public void RemoveCallbacks(ISwimmerActions instance)
        {
            if (m_Wrapper.m_SwimmerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISwimmerActions instance)
        {
            foreach (var item in m_Wrapper.m_SwimmerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SwimmerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SwimmerActions @Swimmer => new SwimmerActions(this);
    public interface ISwimmerActions
    {
        void OnSwim(InputAction.CallbackContext context);
    }
}
